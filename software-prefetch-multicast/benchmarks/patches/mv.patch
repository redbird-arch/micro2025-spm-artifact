diff --git a/benchmark/GemForgeMicroSuite/omp_dense_mv_blk/omp_dense_mv_blk.c b/benchmark/GemForgeMicroSuite/omp_dense_mv_blk/omp_dense_mv_blk.c
index e3120cf..990c4fa 100644
--- a/benchmark/GemForgeMicroSuite/omp_dense_mv_blk/omp_dense_mv_blk.c
+++ b/benchmark/GemForgeMicroSuite/omp_dense_mv_blk/omp_dense_mv_blk.c
@@ -16,11 +16,11 @@ typedef float Value;
 #define CHECK
 #define WARM_CACHE
 
-#define N 256
-#define M 65536
+#define N 32 //256
+#define M 65536 //24000 //16000 //65536
 #define Bx 16
 // #define Bx 4
-#define By 4
+#define By 2 //4
 
 float hsum_ps_sse1(__m128 v) { // v = [ D C | B A ]
   __m128 shuf = _mm_shuffle_ps(v, v, _MM_SHUFFLE(2, 3, 0, 1)); // [ C D | A B ]
@@ -32,6 +32,7 @@ float hsum_ps_sse1(__m128 v) { // v = [ D C | B A ]
 }
 
 __attribute__((noinline)) Value foo(Value *A, Value *B, Value *C) {
+    printf("Execute foo\n");
 // #pragma clang loop vectorize(disable)
 #pragma omp parallel for schedule(static)
   for (uint64_t i = 0; i < N; i += By) {
@@ -91,13 +92,16 @@ int main(int argc, char *argv[]) {
   Value *B = (Value *)aligned_alloc(CACHE_BLOCK_SIZE, M * sizeof(Value));
   Value *C = (Value *)aligned_alloc(CACHE_BLOCK_SIZE, N * sizeof(Value));
 
+  printf("N: %d, M: %d, By: %d\n", N, M, By);
+  printf("B vector base address: %p and last address: %p\n", B, B+M-1);
+
 #ifdef GEM_FORGE
   m5_detail_sim_start();
 #endif
 
 #ifdef WARM_CACHE
   // This should warm up the cache.
-  for (long long i = 0; i < N * M; i += CACHE_BLOCK_SIZE / sizeof(Value)) {
+  /*for (long long i = 0; i < N * M; i += CACHE_BLOCK_SIZE / sizeof(Value)) {
     volatile Value x = A[i];
   }
   for (long long i = 0; i < M; i += CACHE_BLOCK_SIZE / sizeof(Value)) {
@@ -105,13 +109,15 @@ int main(int argc, char *argv[]) {
   }
   for (long long i = 0; i < N; i += CACHE_BLOCK_SIZE / sizeof(Value)) {
     volatile Value y = C[i];
-  }
+  }*/
+  volatile Value temp = foo(A, B, C);
   // Start the threads.
 #pragma omp parallel for schedule(static)
   for (int tid = 0; tid < numThreads; ++tid) {
     volatile Value x = A[tid];
   }
 #endif
+
 #ifdef GEM_FORGE
   m5_reset_stats(0, 0);
 #endif
@@ -120,6 +126,7 @@ int main(int argc, char *argv[]) {
 #ifdef GEM_FORGE
   m5_detail_sim_end();
   exit(0);
+  return temp + c;
 #endif
 
 #ifdef CHECK
